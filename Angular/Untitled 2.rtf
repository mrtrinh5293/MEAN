{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1. var myString: string;\
// I can assign myString like this:\
myString = "Bee stinger";\
// Why is there a problem with this? What can I do to fix this?\
myString = "haha";\
\
2. function sayHello(name: string)\{\
   return `Hello, $\{name\}!`;\
\}\
// This is working great:\
console.log(sayHello("Kermit"));\
// Why isn't this working? I want it to return "Hello, 9!"\
console.log(sayHello("9"));\
\
3. function fullName(firstName: string, lastName: string, middleName: string)\{\
   let fullName = `$\{firstName\} $\{middleName\} $\{lastName\}`;\
   return fullName;\
\}\
console.log(fullName("Jimbo","", "Jones"));\
\
4. const jay = \{\
   firstName: "Jay",\
   lastName: "Patel",\
   belts: 4\
\}\
// This seems to work fine:\
console.log(graduate(christine));\
// This one has problems:\
console.log(graduate(jay));\
\
5. class Ninja \{\
   fullName: string;\
   constructor(\
      public firstName: string,\
      public lastName: string)\{\
         this.fullName = `$\{firstName\} $\{lastName\}`;\
      \}\
   debug()\{\
      console.log("Console.log() is my friend.")\
   \}\
\}\
// This is not making an instance of Ninja, for some reason:\
const shane = new Ninja("name", "last");\
// Since I'm having trouble making an instance of Ninja, I decided to do this:\
const turing = \{\
   fullName: "Alan Turing",\
   firstName: "Alan",\
   lastName: "Turing"\
\}\
// Now I'll make a study function, which is a lot like our graduate function from above:\
function study(programmer: Ninja)\{\
    return `Ready to whiteboard an algorithm, $\{programmer.fullName\}?`\
   \
\}\
// Now this has problems:\
console.log(study(shane));\
\
6. var increment = x => x + 1;\
// This works great:\
console.log(increment(3));\
var square = x => \{x * x\};\
// This is not showing me what I want:\
console.log(square(4));\
// This is not working:\
var multiply = (x,y) => x * y;\
// Nor is this working:\
var math = (x, y) => \{\
    let sum = x + y;\
   let product = x * y;\
   let difference = Math.abs(x-y);\
   return [sum, product, difference];\
\}\
\
7. class Elephant \{\
   constructor(public age: number)\{\}\
   birthday = age => \{\
      this.age++;\
   \}\
\}\
const babar = new Elephant(8);\
setTimeout(babar.birthday, 1000)\
setTimeout(function()\{\
   console.log(`Babar's age is $\{babar.age\}.`)\
   \}, 2000)}